"""Sensors for Environment Canada (EC)."""
import datetime
from env_canada import ECAirQuality

from homeassistant.components.sensor import SensorEntity
from homeassistant.const import (
    ATTR_ATTRIBUTION,
    CONF_LATITUDE,
    CONF_LONGITUDE,
    CONF_NAME,
    LENGTH_KILOMETERS,
    LENGTH_METERS,
    LENGTH_MILES,
    PERCENTAGE,
    PRESSURE_INHG,
    PRESSURE_PA,
    SPEED_MILES_PER_HOUR,
    TEMP_CELSIUS,
)
from homeassistant.util.distance import convert as convert_distance
from homeassistant.util.pressure import convert as convert_pressure
from homeassistant.util import Throttle

from . import ECBaseEntity, ECUpdateFailed
from .const import (
    ATTRIBUTION_EN,
    ATTRIBUTION_FR,
    CONF_LANGUAGE,
    CONF_STATION,
    DEFAULT_NAME,
    DOMAIN,
    SENSOR_TYPES,
)

ALERTS = [
    ("advisories", "Advisory", "mdi:bell-alert"),
    ("endings", "Ending", "mdi:alert-circle-check"),
    ("statements", "Statement", "mdi:bell-alert"),
    ("warnings", "Warning", "mdi:alert-octagon"),
    ("watches", "Watch", "mdi:alert"),
]
MIN_TIME_BETWEEN_UPDATES = datetime.timedelta(minutes=30)
MIN_TIME_BETWEEN_UPDATES = datetime.timedelta(minutes=1)


async def async_setup_entry(hass, config_entry, async_add_entities):
    """Set up the EC weather platform."""
    coordinator = hass.data[DOMAIN][config_entry.entry_id]

    async_add_entities(
        ECSensor(
            coordinator, config_entry.data, description, hass.config.units.is_metric
        )
        for description in SENSOR_TYPES
    )
    async_add_entities(
        ECAlertSensor(coordinator, config_entry.data, alert) for alert in ALERTS
    )

    lat = config_entry.data.get(CONF_LATITUDE, hass.config.latitude)
    lon = config_entry.data.get(CONF_LONGITUDE, hass.config.longitude)
    aqhi_object = ECAirQuality(coordinates=(lat, lon))
    await update_aqhi(aqhi_object)
    async_add_entities([ECAirQualitySensor(aqhi_object, config_entry.data)])


class ECSensor(ECBaseEntity, SensorEntity):
    """An EC Sensor Entity."""

    def __init__(self, coordinator, config, description, is_metric):
        """Initialise the platform with a data instance."""
        name = f"{config.get(CONF_NAME, DEFAULT_NAME)} {description.name}"
        super().__init__(coordinator, config, name)

        self._entity_description = description
        self._is_metric = is_metric
        if is_metric:
            self._attr_native_unit_of_measurement = (
                description.native_unit_of_measurement
            )
        else:
            self._attr_native_unit_of_measurement = description.unit_convert
        self._attr_device_class = description.device_class

    @property
    def native_value(self):
        """Return the state."""
        key = self._entity_description.key
        value = self.get_value(key)
        if value is None:
            return None

        if key == "pressure":
            value = value * 10  # Convert kPa to hPa

        if self._is_metric:
            return value

        unit_of_measurement = self._entity_description.unit_convert
        if unit_of_measurement == SPEED_MILES_PER_HOUR:
            value = round(convert_distance(value, LENGTH_KILOMETERS, LENGTH_MILES))
        elif unit_of_measurement == LENGTH_MILES:
            value = round(convert_distance(value, LENGTH_METERS, LENGTH_MILES))
        elif unit_of_measurement == PRESSURE_INHG:
            value = round(convert_pressure(value, PRESSURE_PA, PRESSURE_INHG), 2)
        elif unit_of_measurement == TEMP_CELSIUS:
            value = round(value, 1)
        elif unit_of_measurement == PERCENTAGE:
            value = round(value)
        return value

    @property
    def unique_id(self):
        """Return a unique_id for this entity."""
        station = self._config[CONF_STATION]
        lang = self._config[CONF_LANGUAGE]
        return f"{station}-{lang}-{self._entity_description.key}"

    @property
    def icon(self):
        """Return the icon."""
        return self._entity_description.icon


class ECAlertSensor(ECBaseEntity, SensorEntity):
    """An EC Sensor Entity for Alerts."""

    def __init__(self, coordinator, config, alert_name):
        """Initialise the platform with a data instance."""
        name = f"{config.get(CONF_NAME, DEFAULT_NAME)} {alert_name[1]} Alerts"
        super().__init__(coordinator, config, name)

        self._alert_name = alert_name
        self._alert_attrs = None

    @property
    def native_value(self):
        """Return the state."""
        value = self._coordinator.data.alerts.get(self._alert_name[0], {}).get("value")

        self._alert_attrs = {}
        for index, alert in enumerate(value, start=1):
            self._alert_attrs[f"alert {index}"] = alert.get("title")
            self._alert_attrs[f"alert_time {index}"] = alert.get("date")

        return len(value)

    @property
    def extra_state_attributes(self):
        """Return the state attributes of the device."""
        return self._alert_attrs

    @property
    def unique_id(self):
        """Return a unique_id for this entity."""
        station = self._config[CONF_STATION]
        lang = self._config[CONF_LANGUAGE]
        return f"{station}-{lang}-{self._alert_name[0]}"

    @property
    def icon(self):
        """Return the icon."""
        return self._alert_name[2]


class ECAirQualitySensor(SensorEntity):
    """An EC Sensor Entity for Air Quality."""

    def __init__(self, aqhi_object, config):
        """Initialise the platform with a data instance."""
        self._name = f"{config.get(CONF_NAME, DEFAULT_NAME)} Air Quality"
        self._aqhi_object = aqhi_object
        self._config = config

    @property
    def native_value(self):
        """Return the state."""
        return self._aqhi_object.current

    @property
    def entity_registry_enabled_default(self) -> bool:
        """Return if the entity should be enabled when first added to the entity registry."""
        return True  # FIX ME
        # return False

    # @property
    # def icon(self):
    #     """Return the icon."""
    #     return ???

    @property
    def extra_state_attributes(self):
        """Return the state attributes of the device."""
        return {
            ATTR_ATTRIBUTION: self.attribution,
        }

    @Throttle(MIN_TIME_BETWEEN_UPDATES)
    async def async_update(self):
        """Update AQHI data."""
        await update_aqhi(self._aqhi_object)

    @property
    def name(self):
        """Return the name of the sensor."""
        return self._name

    @property
    def unique_id(self):
        """Return unique ID."""
        # The combination of coords and language are unique for all EC weather reporting
        return f"{self._config[CONF_LATITUDE]}-{self._config[CONF_LONGITUDE]}-{self._config[CONF_LANGUAGE]}-aqhi"

    @property
    def attribution(self):
        """Return the attribution."""
        return (
            ATTRIBUTION_EN
            if self._config[CONF_LANGUAGE] == "English"
            else ATTRIBUTION_FR
        )

    @property
    def device_info(self):
        """Device info."""
        return {
            "identifiers": {(DOMAIN,)},
            "manufacturer": "Environment Canada",
            "model": "Weather AQHI",
            "default_name": "Weather AQHI",
            "entry_type": "service",
        }


async def update_aqhi(aqhi_object):
    """Update the AQHI data from EC."""
    try:
        await aqhi_object.update()
    except Exception as err:
        raise ECUpdateFailed(f"Environment Canada AQHI update failed: {err}") from err
